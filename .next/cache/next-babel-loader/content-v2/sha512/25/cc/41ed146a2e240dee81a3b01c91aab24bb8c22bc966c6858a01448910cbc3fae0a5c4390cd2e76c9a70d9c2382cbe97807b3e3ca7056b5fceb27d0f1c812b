{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Diana\\\\Desktop\\\\CSUF_SPRING_2021\\\\CPSC_463\\\\projects\\\\hotel\\\\pages\\\\rooms.js\";\nimport Header from \"../components/header\";\nimport fireApp from \"../firebase_config\";\nimport { useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { useRouter } from \"next/router\";\n\nconst Rooms = ({\n  listings\n}) => {\n  const rsrvInfo = useSelector(state => state.reservation);\n  const rsrvForm = useForm();\n\n  const onRsrvSubmit = data => {\n    const days = Math.floor((Date.parse(data.checkOutDate) - Date.parse(data.checkInDate)) / 8.64e+7);\n    data[\"days\"] = days;\n    dispatch(reserve(data));\n    router.push(`/rooms?type=${data.roomType}`);\n  };\n\n  listings.forEach(i => {\n    i[\"totalCharge\"] = rsrvInfo.days * i.dailyRate;\n  });\n\n  const reserving = ({\n    dailyRate,\n    totalCharge,\n    roomNumber,\n    roomStatus,\n    roomType\n  }) => {\n    fireApp.firestore().collection('reservation').add({\n      firstName: rsrvInfo.firstName,\n      lastName: rsrvInfo.lastName,\n      reservedDate: Date.now(),\n      checkInDate: rsrvInfo.checkInDate,\n      checkOutDate: rsrvInfo.checkOutDate,\n      roomType: roomType,\n      roomStatus: roomStatus,\n      roomNumber: roomNumber,\n      dailyRate: dailyRate,\n      totalCharge: totalCharge\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Header, {\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Rooms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          children: listings === null || listings === void 0 ? void 0 : listings.map((i, j) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Room #: \", i.roomNumber]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Type: \", i.roomType]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 41\n                }, this), !rsrvInfo.firstName && /*#__PURE__*/_jsxDEV(\"select\", {\n                  role: \"none\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: i.roomStatus,\n                    children: i.roomStatus\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 53,\n                    columnNumber: 49\n                  }, this), [\"available\", \"occupied\", \"dirty\", \"maintenance\"].map(i => {\n                    return /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: i,\n                      children: i\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 56,\n                      columnNumber: 57\n                    }, this);\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 45\n                }, this), i.dailyRate && rsrvInfo.firstName && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"Daily Rate: \", i.dailyRate]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 65,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"Total Charge: \", i.totalCharge]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 68,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      reserving(i);\n                    },\n                    children: \"Reserve\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 37\n              }, this)\n            }, JSON.stringify(i), false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\nexport async function getServerSideProps({\n  query\n}) {\n  let listings = [];\n\n  if (query.type) {\n    await fireApp.firestore().collection(\"room\").where(\"roomType\", \"==\", query.type).where(\"roomStatus\", \"==\", \"available\").get().then(queryData => {\n      queryData.forEach(i => {\n        listings.push(i.data());\n      });\n    });\n  } else {\n    await fireApp.firestore().collection(\"room\").orderBy(\"roomNumber\").get().then(queryData => {\n      queryData.forEach(i => {\n        listings.push(i.data());\n      });\n    });\n  }\n\n  return {\n    props: {\n      listings\n    }\n  };\n}\nexport default Rooms;","map":{"version":3,"sources":["C:/Users/Diana/Desktop/CSUF_SPRING_2021/CPSC_463/projects/hotel/pages/rooms.js"],"names":["Header","fireApp","useSelector","useForm","useRouter","Rooms","listings","rsrvInfo","state","reservation","rsrvForm","onRsrvSubmit","data","days","Math","floor","Date","parse","checkOutDate","checkInDate","dispatch","reserve","router","push","roomType","forEach","i","dailyRate","reserving","totalCharge","roomNumber","roomStatus","firestore","collection","add","firstName","lastName","reservedDate","now","handleSubmit","onSubmit","map","j","JSON","stringify","getServerSideProps","query","type","where","get","then","queryData","orderBy","props"],"mappings":"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","sourcesContent":["import Header from \"../components/header\"\r\nimport fireApp from \"../firebase_config\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { useRouter } from \"next/router\";\r\nconst Rooms = ({ listings }) => {\r\n    const rsrvInfo = useSelector(state => state.reservation);\r\n    const rsrvForm = useForm();\r\n    const onRsrvSubmit = data => {\r\n        const days = Math.floor((Date.parse(data.checkOutDate) - Date.parse(data.checkInDate)) / 8.64e+7);\r\n        data[\"days\"] = days;\r\n        dispatch(reserve(data));\r\n        router.push(`/rooms?type=${data.roomType}`);\r\n    };\r\n    listings.forEach((i) => { i[\"totalCharge\"] = rsrvInfo.days * i.dailyRate });\r\n    const reserving = ({ dailyRate, totalCharge, roomNumber, roomStatus, roomType }) => {\r\n        fireApp.firestore().collection('reservation').add({\r\n            firstName: rsrvInfo.firstName,\r\n            lastName: rsrvInfo.lastName,\r\n            reservedDate: Date.now(),\r\n            checkInDate: rsrvInfo.checkInDate,\r\n            checkOutDate: rsrvInfo.checkOutDate,\r\n            roomType: roomType,\r\n            roomStatus: roomStatus,\r\n            roomNumber: roomNumber,\r\n            dailyRate: dailyRate,\r\n            totalCharge: totalCharge\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Header>\r\n                <main>\r\n                    <h1>\r\n                        Rooms\r\n                    </h1>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        {listings?.map((i, j) => {\r\n                            return (\r\n                                <div key={JSON.stringify(i)}>\r\n                                    <div>\r\n                                        <span>\r\n                                            Room #: {i.roomNumber}\r\n                                        </span>\r\n                                        <span>\r\n                                            Type: {i.roomType}\r\n                                        </span>\r\n                                        {\r\n                                            !rsrvInfo.firstName &&\r\n                                            <select role=\"none\">\r\n                                                <option value={i.roomStatus}>{i.roomStatus}</option>\r\n                                                {[\"available\", \"occupied\", \"dirty\", \"maintenance\"].map(i => {\r\n                                                    return (\r\n                                                        <option value={i} >{i}</option>\r\n                                                    )\r\n                                                })}\r\n                                            </select>\r\n                                        }\r\n\r\n                                        {\r\n                                            i.dailyRate && rsrvInfo.firstName &&\r\n                                            <>\r\n                                                <span>\r\n                                                    Daily Rate: {i.dailyRate}\r\n                                                </span>\r\n                                                <span>\r\n                                                    Total Charge: {i.totalCharge}\r\n                                                </span>\r\n                                                <button onClick={() => {\r\n                                                    reserving(i)\r\n                                                }} >Reserve</button>\r\n                                            </>\r\n                                        }\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </form>\r\n                </main>\r\n            </Header>\r\n        </div >\r\n    )\r\n}\r\nexport async function getServerSideProps({ query }) {\r\n    let listings = [];\r\n    if (query.type) {\r\n        await fireApp.firestore()\r\n            .collection(\"room\")\r\n            .where(\"roomType\", \"==\", query.type)\r\n            .where(\"roomStatus\", \"==\", \"available\")\r\n            .get()\r\n            .then(queryData => {\r\n                queryData.forEach(i => {\r\n                    listings.push(i.data());\r\n                })\r\n            })\r\n    }\r\n    else {\r\n        await fireApp.firestore()\r\n            .collection(\"room\")\r\n            .orderBy(\"roomNumber\")\r\n            .get()\r\n            .then(queryData => {\r\n                queryData.forEach(i => {\r\n                    listings.push(i.data());\r\n                })\r\n            })\r\n    }\r\n    return {\r\n        props: { listings },\r\n    }\r\n}\r\nexport default Rooms;\r\n"]},"metadata":{},"sourceType":"module"}